// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  name String?
  password String
  reset_password_token String? @unique
  reset_password_ttl DateTime?
  transactions TransactionUser[]
  debts Balance[] @relation(name: "creditor")
  credits Balance[] @relation(name: "debtor")
  sessions Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id Int @id @default(autoincrement())
  key String @unique
  user User @relation(fields: [userId], references: [id])
  userId Int
  lastSeen DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id Int @id @default(autoincrement())
  amount Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransactionUser {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  amount Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Balance {
  id Int @id @default(autoincrement())
  creditor User @relation(fields: [creditorId], references: [id], name: "creditor")
  creditorId Int
  debtor User @relation(fields: [debtorId], references: [id], name: "debtor")
  debtorId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}