// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum CategoryType {
  IN
  OUT
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  name String?
  password String
  reset_password_token String? @unique
  reset_password_ttl DateTime?
  debts Balance[] @relation(name: "creditor")
  credits Balance[] @relation(name: "debtor")
  sessions Session[]
  userAccounts UserAccount[]
  userTransactions UserTransaction[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id Int @id @default(autoincrement())
  key String @unique
  lastSeen DateTime
  userId Int
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id Int @id @default(autoincrement())
  name String
  amount Decimal
  currency String
  transactions Transaction[]
  transfersIn Transfer[] @relation("receiver")
  transfersOut Transfer[] @relation("sender")
  userAccounts UserAccount[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserAccount {
  id Int @id @default(autoincrement())
  userId Int
  accountId Int
  user User @relation(fields: [userId], references: [id])
  account Account @relation(fields: [accountId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transfer {
  id Int @id @default(autoincrement())
  amountOut Decimal
  amountIn Decimal
  senderId Int
  receiverId Int
  sender Account @relation(fields: [senderId], references: [id], name: "sender")
  receiver Account @relation(fields: [receiverId], references: [id], name: "receiver")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id Int @id @default(autoincrement())
  amount Decimal
  accountId Int
  categoryId Int?
  account Account @relation(fields: [accountId], references: [id])
  category Category? @relation(fields: [categoryId], references: [id])
  userTransactions UserTransaction[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserTransaction {
  id Int @id @default(autoincrement())
  amount Int
  userId Int
  TransactionId Int
  user User @relation(fields: [userId], references: [id])
  transaction Transaction @relation(fields: [TransactionId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Balance {
  id Int @id @default(autoincrement())
  amount Int
  currency String
  creditorId Int
  debtorId Int
  creditor User @relation(fields: [creditorId], references: [id], name: "creditor")
  debtor User @relation(fields: [debtorId], references: [id], name: "debtor")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id Int @id @default(autoincrement())
  name String
  parentId Int?
  type CategoryType
  parentCategory Category?  @relation("parentCategory", fields: [parentId], references: [id])
  subCategories Category[] @relation("parentCategory")
  transactions Transaction[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}